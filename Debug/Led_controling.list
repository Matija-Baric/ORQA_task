
Led_controling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a18  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003bac  08003bac  00013bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc4  08003bc4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003bc4  08003bc4  00013bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bcc  08003bcc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bcc  08003bcc  00013bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bd0  08003bd0  00013bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08003be0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003be0  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7d0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a57  00000000  00000000  0002d80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  0002f268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  0002fee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017494  00000000  00000000  00030ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcec  00000000  00000000  00047f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098d8c  00000000  00000000  00055c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee9cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f4  00000000  00000000  000eea1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003b94 	.word	0x08003b94

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003b94 	.word	0x08003b94

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fd40 	bl	8000f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f906 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 fa8c 	bl	8000a00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 fa60 	bl	80009ac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004ec:	f000 f96c 	bl	80007c8 <MX_ADC1_Init>
  MX_TIM2_Init();
 80004f0:	f000 f9bc 	bl	800086c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004f4:	f000 fa30 	bl	8000958 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 80004f8:	4875      	ldr	r0, [pc, #468]	; (80006d0 <main+0x1f8>)
 80004fa:	f002 f925 	bl	8002748 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80004fe:	2104      	movs	r1, #4
 8000500:	4873      	ldr	r0, [pc, #460]	; (80006d0 <main+0x1f8>)
 8000502:	f002 f9d5 	bl	80028b0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //funtion for switching button value is implemented at the bottom
	 if(button == 1)
 8000506:	4b73      	ldr	r3, [pc, #460]	; (80006d4 <main+0x1fc>)
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d117      	bne.n	800053e <main+0x66>
	 {
		 HAL_ADC_Start(&hadc1);
 800050e:	4872      	ldr	r0, [pc, #456]	; (80006d8 <main+0x200>)
 8000510:	f000 fe00 	bl	8001114 <HAL_ADC_Start>
		 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000514:	f04f 31ff 	mov.w	r1, #4294967295
 8000518:	486f      	ldr	r0, [pc, #444]	; (80006d8 <main+0x200>)
 800051a:	f000 feaf 	bl	800127c <HAL_ADC_PollForConversion>
		 step = HAL_ADC_GetValue(&hadc1);
 800051e:	486e      	ldr	r0, [pc, #440]	; (80006d8 <main+0x200>)
 8000520:	f000 ff37 	bl	8001392 <HAL_ADC_GetValue>
 8000524:	4603      	mov	r3, r0
 8000526:	b29a      	uxth	r2, r3
 8000528:	4b6c      	ldr	r3, [pc, #432]	; (80006dc <main+0x204>)
 800052a:	801a      	strh	r2, [r3, #0]

		 __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, step);
 800052c:	4b6b      	ldr	r3, [pc, #428]	; (80006dc <main+0x204>)
 800052e:	881a      	ldrh	r2, [r3, #0]
 8000530:	4b67      	ldr	r3, [pc, #412]	; (80006d0 <main+0x1f8>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	639a      	str	r2, [r3, #56]	; 0x38
		 HAL_Delay(5);
 8000536:	2005      	movs	r0, #5
 8000538:	f000 fd84 	bl	8001044 <HAL_Delay>
 800053c:	e7e3      	b.n	8000506 <main+0x2e>
	 }
	 else
	 {
		 HAL_UART_Receive (&huart1, &data, sizeof(data), 100);
 800053e:	2364      	movs	r3, #100	; 0x64
 8000540:	2202      	movs	r2, #2
 8000542:	4967      	ldr	r1, [pc, #412]	; (80006e0 <main+0x208>)
 8000544:	4867      	ldr	r0, [pc, #412]	; (80006e4 <main+0x20c>)
 8000546:	f002 ff74 	bl	8003432 <HAL_UART_Receive>
		 //ali nisam znao kako napraviti polje portova i pinova
		 //u svakom case-u bih proslijedio dobiveni podatak funkciji
		 //u for petlji koja bi isla npr do 5, usporediti npr if( i == 3)
		 //predati funkciji HAL_GPIO_WritePin(poljeportova[i], poljepinova[i], GPIO_PIN_SET)
		 //else HAL_GPIO_WritePin(poljeportova[i], poljepinova[i], GPIO_PIN_RESET)
		 switch(data)
 800054a:	4b65      	ldr	r3, [pc, #404]	; (80006e0 <main+0x208>)
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	3b31      	subs	r3, #49	; 0x31
 8000550:	2b04      	cmp	r3, #4
 8000552:	f200 809e 	bhi.w	8000692 <main+0x1ba>
 8000556:	a201      	add	r2, pc, #4	; (adr r2, 800055c <main+0x84>)
 8000558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055c:	08000571 	.word	0x08000571
 8000560:	080005ab 	.word	0x080005ab
 8000564:	080005e5 	.word	0x080005e5
 8000568:	0800061f 	.word	0x0800061f
 800056c:	08000659 	.word	0x08000659
		 {
		 case '1':
			 HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000576:	485c      	ldr	r0, [pc, #368]	; (80006e8 <main+0x210>)
 8000578:	f001 fbcc 	bl	8001d14 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2120      	movs	r1, #32
 8000580:	485a      	ldr	r0, [pc, #360]	; (80006ec <main+0x214>)
 8000582:	f001 fbc7 	bl	8001d14 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2110      	movs	r1, #16
 800058a:	4858      	ldr	r0, [pc, #352]	; (80006ec <main+0x214>)
 800058c:	f001 fbc2 	bl	8001d14 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000596:	4855      	ldr	r0, [pc, #340]	; (80006ec <main+0x214>)
 8000598:	f001 fbbc 	bl	8001d14 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a2:	4851      	ldr	r0, [pc, #324]	; (80006e8 <main+0x210>)
 80005a4:	f001 fbb6 	bl	8001d14 <HAL_GPIO_WritePin>
			 break;
 80005a8:	e090      	b.n	80006cc <main+0x1f4>

		 case '2':
			 HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b0:	484d      	ldr	r0, [pc, #308]	; (80006e8 <main+0x210>)
 80005b2:	f001 fbaf 	bl	8001d14 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2120      	movs	r1, #32
 80005ba:	484c      	ldr	r0, [pc, #304]	; (80006ec <main+0x214>)
 80005bc:	f001 fbaa 	bl	8001d14 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2110      	movs	r1, #16
 80005c4:	4849      	ldr	r0, [pc, #292]	; (80006ec <main+0x214>)
 80005c6:	f001 fba5 	bl	8001d14 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	4846      	ldr	r0, [pc, #280]	; (80006ec <main+0x214>)
 80005d2:	f001 fb9f 	bl	8001d14 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005dc:	4842      	ldr	r0, [pc, #264]	; (80006e8 <main+0x210>)
 80005de:	f001 fb99 	bl	8001d14 <HAL_GPIO_WritePin>
			 break;
 80005e2:	e073      	b.n	80006cc <main+0x1f4>

		 case '3':
			 HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ea:	483f      	ldr	r0, [pc, #252]	; (80006e8 <main+0x210>)
 80005ec:	f001 fb92 	bl	8001d14 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2120      	movs	r1, #32
 80005f4:	483d      	ldr	r0, [pc, #244]	; (80006ec <main+0x214>)
 80005f6:	f001 fb8d 	bl	8001d14 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	2110      	movs	r1, #16
 80005fe:	483b      	ldr	r0, [pc, #236]	; (80006ec <main+0x214>)
 8000600:	f001 fb88 	bl	8001d14 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060a:	4838      	ldr	r0, [pc, #224]	; (80006ec <main+0x214>)
 800060c:	f001 fb82 	bl	8001d14 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000616:	4834      	ldr	r0, [pc, #208]	; (80006e8 <main+0x210>)
 8000618:	f001 fb7c 	bl	8001d14 <HAL_GPIO_WritePin>
			 break;
 800061c:	e056      	b.n	80006cc <main+0x1f4>

		 case '4':
		 	 HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000624:	4830      	ldr	r0, [pc, #192]	; (80006e8 <main+0x210>)
 8000626:	f001 fb75 	bl	8001d14 <HAL_GPIO_WritePin>
		 	 HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2120      	movs	r1, #32
 800062e:	482f      	ldr	r0, [pc, #188]	; (80006ec <main+0x214>)
 8000630:	f001 fb70 	bl	8001d14 <HAL_GPIO_WritePin>
		 	 HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2110      	movs	r1, #16
 8000638:	482c      	ldr	r0, [pc, #176]	; (80006ec <main+0x214>)
 800063a:	f001 fb6b 	bl	8001d14 <HAL_GPIO_WritePin>
		 	 HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000644:	4829      	ldr	r0, [pc, #164]	; (80006ec <main+0x214>)
 8000646:	f001 fb65 	bl	8001d14 <HAL_GPIO_WritePin>
		 	 HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000650:	4825      	ldr	r0, [pc, #148]	; (80006e8 <main+0x210>)
 8000652:	f001 fb5f 	bl	8001d14 <HAL_GPIO_WritePin>
		 	 break;
 8000656:	e039      	b.n	80006cc <main+0x1f4>

		 case '5':
			 HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065e:	4822      	ldr	r0, [pc, #136]	; (80006e8 <main+0x210>)
 8000660:	f001 fb58 	bl	8001d14 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2120      	movs	r1, #32
 8000668:	4820      	ldr	r0, [pc, #128]	; (80006ec <main+0x214>)
 800066a:	f001 fb53 	bl	8001d14 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2110      	movs	r1, #16
 8000672:	481e      	ldr	r0, [pc, #120]	; (80006ec <main+0x214>)
 8000674:	f001 fb4e 	bl	8001d14 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067e:	481b      	ldr	r0, [pc, #108]	; (80006ec <main+0x214>)
 8000680:	f001 fb48 	bl	8001d14 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068a:	4817      	ldr	r0, [pc, #92]	; (80006e8 <main+0x210>)
 800068c:	f001 fb42 	bl	8001d14 <HAL_GPIO_WritePin>
		 	 break;
 8000690:	e01c      	b.n	80006cc <main+0x1f4>

		 default:
			 HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000698:	4813      	ldr	r0, [pc, #76]	; (80006e8 <main+0x210>)
 800069a:	f001 fb3b 	bl	8001d14 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2120      	movs	r1, #32
 80006a2:	4812      	ldr	r0, [pc, #72]	; (80006ec <main+0x214>)
 80006a4:	f001 fb36 	bl	8001d14 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2110      	movs	r1, #16
 80006ac:	480f      	ldr	r0, [pc, #60]	; (80006ec <main+0x214>)
 80006ae:	f001 fb31 	bl	8001d14 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <main+0x214>)
 80006ba:	f001 fb2b 	bl	8001d14 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c4:	4808      	ldr	r0, [pc, #32]	; (80006e8 <main+0x210>)
 80006c6:	f001 fb25 	bl	8001d14 <HAL_GPIO_WritePin>
			 break;
 80006ca:	bf00      	nop
	 if(button == 1)
 80006cc:	e71b      	b.n	8000506 <main+0x2e>
 80006ce:	bf00      	nop
 80006d0:	20000078 	.word	0x20000078
 80006d4:	2000002a 	.word	0x2000002a
 80006d8:	20000030 	.word	0x20000030
 80006dc:	20000028 	.word	0x20000028
 80006e0:	2000002c 	.word	0x2000002c
 80006e4:	200000c0 	.word	0x200000c0
 80006e8:	40020000 	.word	0x40020000
 80006ec:	40020400 	.word	0x40020400

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	; 0x50
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2230      	movs	r2, #48	; 0x30
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 fa40 	bl	8003b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <SystemClock_Config+0xd0>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	4a28      	ldr	r2, [pc, #160]	; (80007c0 <SystemClock_Config+0xd0>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	; 0x40
 8000724:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <SystemClock_Config+0xd0>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <SystemClock_Config+0xd4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800073c:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <SystemClock_Config+0xd4>)
 800073e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <SystemClock_Config+0xd4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000750:	2302      	movs	r3, #2
 8000752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2310      	movs	r3, #16
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2302      	movs	r3, #2
 800075e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000760:	2300      	movs	r3, #0
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000764:	2310      	movs	r3, #16
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000768:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800076c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800076e:	2304      	movs	r3, #4
 8000770:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000772:	2307      	movs	r3, #7
 8000774:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	4618      	mov	r0, r3
 800077c:	f001 fafc 	bl	8001d78 <HAL_RCC_OscConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000786:	f000 fa17 	bl	8000bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	230f      	movs	r3, #15
 800078c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078e:	2302      	movs	r3, #2
 8000790:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2102      	movs	r1, #2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 fd5e 	bl	8002268 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007b2:	f000 fa01 	bl	8000bb8 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3750      	adds	r7, #80	; 0x50
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <MX_ADC1_Init+0x98>)
 80007dc:	4a21      	ldr	r2, [pc, #132]	; (8000864 <MX_ADC1_Init+0x9c>)
 80007de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_ADC1_Init+0x98>)
 80007e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_ADC1_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_ADC1_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_ADC1_Init+0x98>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_ADC1_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_ADC1_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_ADC1_Init+0x98>)
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <MX_ADC1_Init+0xa0>)
 800080c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_ADC1_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_ADC1_Init+0x98>)
 8000816:	2201      	movs	r2, #1
 8000818:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_ADC1_Init+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_ADC1_Init+0x98>)
 8000824:	2201      	movs	r2, #1
 8000826:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000828:	480d      	ldr	r0, [pc, #52]	; (8000860 <MX_ADC1_Init+0x98>)
 800082a:	f000 fc2f 	bl	800108c <HAL_ADC_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000834:	f000 f9c0 	bl	8000bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000838:	2300      	movs	r3, #0
 800083a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800083c:	2301      	movs	r3, #1
 800083e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000844:	463b      	mov	r3, r7
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_ADC1_Init+0x98>)
 800084a:	f000 fdaf 	bl	80013ac <HAL_ADC_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000854:	f000 f9b0 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000030 	.word	0x20000030
 8000864:	40012000 	.word	0x40012000
 8000868:	0f000001 	.word	0x0f000001

0800086c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08e      	sub	sp, #56	; 0x38
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000872:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
 8000898:	615a      	str	r2, [r3, #20]
 800089a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800089c:	4b2d      	ldr	r3, [pc, #180]	; (8000954 <MX_TIM2_Init+0xe8>)
 800089e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 80008a4:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <MX_TIM2_Init+0xe8>)
 80008a6:	2202      	movs	r2, #2
 80008a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008aa:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <MX_TIM2_Init+0xe8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4096;
 80008b0:	4b28      	ldr	r3, [pc, #160]	; (8000954 <MX_TIM2_Init+0xe8>)
 80008b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b8:	4b26      	ldr	r3, [pc, #152]	; (8000954 <MX_TIM2_Init+0xe8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008be:	4b25      	ldr	r3, [pc, #148]	; (8000954 <MX_TIM2_Init+0xe8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008c4:	4823      	ldr	r0, [pc, #140]	; (8000954 <MX_TIM2_Init+0xe8>)
 80008c6:	f001 feef 	bl	80026a8 <HAL_TIM_Base_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008d0:	f000 f972 	bl	8000bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008de:	4619      	mov	r1, r3
 80008e0:	481c      	ldr	r0, [pc, #112]	; (8000954 <MX_TIM2_Init+0xe8>)
 80008e2:	f002 f957 	bl	8002b94 <HAL_TIM_ConfigClockSource>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80008ec:	f000 f964 	bl	8000bb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008f0:	4818      	ldr	r0, [pc, #96]	; (8000954 <MX_TIM2_Init+0xe8>)
 80008f2:	f001 ff83 	bl	80027fc <HAL_TIM_PWM_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80008fc:	f000 f95c 	bl	8000bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000908:	f107 0320 	add.w	r3, r7, #32
 800090c:	4619      	mov	r1, r3
 800090e:	4811      	ldr	r0, [pc, #68]	; (8000954 <MX_TIM2_Init+0xe8>)
 8000910:	f002 fcd4 	bl	80032bc <HAL_TIMEx_MasterConfigSynchronization>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800091a:	f000 f94d 	bl	8000bb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800091e:	2360      	movs	r3, #96	; 0x60
 8000920:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2204      	movs	r2, #4
 8000932:	4619      	mov	r1, r3
 8000934:	4807      	ldr	r0, [pc, #28]	; (8000954 <MX_TIM2_Init+0xe8>)
 8000936:	f002 f86b 	bl	8002a10 <HAL_TIM_PWM_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000940:	f000 f93a 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <MX_TIM2_Init+0xe8>)
 8000946:	f000 f9c9 	bl	8000cdc <HAL_TIM_MspPostInit>

}
 800094a:	bf00      	nop
 800094c:	3738      	adds	r7, #56	; 0x38
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000078 	.word	0x20000078

08000958 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <MX_USART1_UART_Init+0x50>)
 8000960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000964:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000990:	f002 fd02 	bl	8003398 <HAL_UART_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800099a:	f000 f90d 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000c0 	.word	0x200000c0
 80009a8:	40011000 	.word	0x40011000

080009ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <MX_USART2_UART_Init+0x50>)
 80009b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009e4:	f002 fcd8 	bl	8003398 <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ee:	f000 f8e3 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000104 	.word	0x20000104
 80009fc:	40004400 	.word	0x40004400

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	4b3d      	ldr	r3, [pc, #244]	; (8000b10 <MX_GPIO_Init+0x110>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a3c      	ldr	r2, [pc, #240]	; (8000b10 <MX_GPIO_Init+0x110>)
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b3a      	ldr	r3, [pc, #232]	; (8000b10 <MX_GPIO_Init+0x110>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	4b36      	ldr	r3, [pc, #216]	; (8000b10 <MX_GPIO_Init+0x110>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a35      	ldr	r2, [pc, #212]	; (8000b10 <MX_GPIO_Init+0x110>)
 8000a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b33      	ldr	r3, [pc, #204]	; (8000b10 <MX_GPIO_Init+0x110>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <MX_GPIO_Init+0x110>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a2e      	ldr	r2, [pc, #184]	; (8000b10 <MX_GPIO_Init+0x110>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <MX_GPIO_Init+0x110>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <MX_GPIO_Init+0x110>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a27      	ldr	r2, [pc, #156]	; (8000b10 <MX_GPIO_Init+0x110>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <MX_GPIO_Init+0x110>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_5_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000a8c:	4821      	ldr	r0, [pc, #132]	; (8000b14 <MX_GPIO_Init+0x114>)
 8000a8e:	f001 f941 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_4_Pin|LED_3_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000a98:	481f      	ldr	r0, [pc, #124]	; (8000b18 <MX_GPIO_Init+0x118>)
 8000a9a:	f001 f93b 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8000a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4819      	ldr	r0, [pc, #100]	; (8000b1c <MX_GPIO_Init+0x11c>)
 8000ab6:	f000 ffa9 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED_5_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_5_Pin|LED_1_Pin;
 8000aba:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4810      	ldr	r0, [pc, #64]	; (8000b14 <MX_GPIO_Init+0x114>)
 8000ad4:	f000 ff9a 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|LED_2_Pin;
 8000ad8:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4809      	ldr	r0, [pc, #36]	; (8000b18 <MX_GPIO_Init+0x118>)
 8000af2:	f000 ff8b 	bl	8001a0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	2028      	movs	r0, #40	; 0x28
 8000afc:	f000 ff4f 	bl	800199e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b00:	2028      	movs	r0, #40	; 0x28
 8000b02:	f000 ff68 	bl	80019d6 <HAL_NVIC_EnableIRQ>

}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	; 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	40020800 	.word	0x40020800

08000b20 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//Button variable changes value from 0 to 1 and 1 to 0 if button is pressed
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == button_Pin) // INT Source is pin A9
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b30:	d131      	bne.n	8000b96 <HAL_GPIO_EXTI_Callback+0x76>
    {
    if(button == 1)
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <HAL_GPIO_EXTI_Callback+0x80>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d10b      	bne.n	8000b52 <HAL_GPIO_EXTI_Callback+0x32>
    {
    	step = 0;
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <HAL_GPIO_EXTI_Callback+0x84>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	801a      	strh	r2, [r3, #0]
    	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, step);
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <HAL_GPIO_EXTI_Callback+0x84>)
 8000b42:	881a      	ldrh	r2, [r3, #0]
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <HAL_GPIO_EXTI_Callback+0x88>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	639a      	str	r2, [r3, #56]	; 0x38
    	button = 0;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_GPIO_EXTI_Callback+0x80>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	801a      	strh	r2, [r3, #0]
    	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
    	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
    	button = 1;
    }
}
}
 8000b50:	e021      	b.n	8000b96 <HAL_GPIO_EXTI_Callback+0x76>
    	data = 0;
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <HAL_GPIO_EXTI_Callback+0x8c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	801a      	strh	r2, [r3, #0]
    	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b5e:	4814      	ldr	r0, [pc, #80]	; (8000bb0 <HAL_GPIO_EXTI_Callback+0x90>)
 8000b60:	f001 f8d8 	bl	8001d14 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2120      	movs	r1, #32
 8000b68:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <HAL_GPIO_EXTI_Callback+0x94>)
 8000b6a:	f001 f8d3 	bl	8001d14 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2110      	movs	r1, #16
 8000b72:	4810      	ldr	r0, [pc, #64]	; (8000bb4 <HAL_GPIO_EXTI_Callback+0x94>)
 8000b74:	f001 f8ce 	bl	8001d14 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7e:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <HAL_GPIO_EXTI_Callback+0x94>)
 8000b80:	f001 f8c8 	bl	8001d14 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8a:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <HAL_GPIO_EXTI_Callback+0x90>)
 8000b8c:	f001 f8c2 	bl	8001d14 <HAL_GPIO_WritePin>
    	button = 1;
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_GPIO_EXTI_Callback+0x80>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	801a      	strh	r2, [r3, #0]
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000002a 	.word	0x2000002a
 8000ba4:	20000028 	.word	0x20000028
 8000ba8:	20000078 	.word	0x20000078
 8000bac:	2000002c 	.word	0x2000002c
 8000bb0:	40020000 	.word	0x40020000
 8000bb4:	40020400 	.word	0x40020400

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
}
 8000bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <Error_Handler+0x8>
	...

08000bc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c02:	2007      	movs	r0, #7
 8000c04:	f000 fec0 	bl	8001988 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40023800 	.word	0x40023800

08000c14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <HAL_ADC_MspInit+0x7c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d127      	bne.n	8000c86 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <HAL_ADC_MspInit+0x80>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a15      	ldr	r2, [pc, #84]	; (8000c94 <HAL_ADC_MspInit+0x80>)
 8000c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <HAL_ADC_MspInit+0x80>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_ADC_MspInit+0x80>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <HAL_ADC_MspInit+0x80>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <HAL_ADC_MspInit+0x80>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c72:	2303      	movs	r3, #3
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <HAL_ADC_MspInit+0x84>)
 8000c82:	f000 fec3 	bl	8001a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c86:	bf00      	nop
 8000c88:	3728      	adds	r7, #40	; 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40012000 	.word	0x40012000
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000

08000c9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cac:	d10d      	bne.n	8000cca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_TIM_Base_MspInit+0x3c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <HAL_TIM_Base_MspInit+0x3c>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_TIM_Base_MspInit+0x3c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800

08000cdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cfc:	d11d      	bne.n	8000d3a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <HAL_TIM_MspPostInit+0x68>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <HAL_TIM_MspPostInit+0x68>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <HAL_TIM_MspPostInit+0x68>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	4619      	mov	r1, r3
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <HAL_TIM_MspPostInit+0x6c>)
 8000d36:	f000 fe69 	bl	8001a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3720      	adds	r7, #32
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000

08000d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08c      	sub	sp, #48	; 0x30
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a41      	ldr	r2, [pc, #260]	; (8000e70 <HAL_UART_MspInit+0x124>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d14b      	bne.n	8000e06 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	4b40      	ldr	r3, [pc, #256]	; (8000e74 <HAL_UART_MspInit+0x128>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	4a3f      	ldr	r2, [pc, #252]	; (8000e74 <HAL_UART_MspInit+0x128>)
 8000d78:	f043 0310 	orr.w	r3, r3, #16
 8000d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7e:	4b3d      	ldr	r3, [pc, #244]	; (8000e74 <HAL_UART_MspInit+0x128>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <HAL_UART_MspInit+0x128>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a38      	ldr	r2, [pc, #224]	; (8000e74 <HAL_UART_MspInit+0x128>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b36      	ldr	r3, [pc, #216]	; (8000e74 <HAL_UART_MspInit+0x128>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <HAL_UART_MspInit+0x128>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a31      	ldr	r2, [pc, #196]	; (8000e74 <HAL_UART_MspInit+0x128>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b2f      	ldr	r3, [pc, #188]	; (8000e74 <HAL_UART_MspInit+0x128>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4826      	ldr	r0, [pc, #152]	; (8000e78 <HAL_UART_MspInit+0x12c>)
 8000de0:	f000 fe14 	bl	8001a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000df4:	2307      	movs	r3, #7
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	481f      	ldr	r0, [pc, #124]	; (8000e7c <HAL_UART_MspInit+0x130>)
 8000e00:	f000 fe04 	bl	8001a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e04:	e030      	b.n	8000e68 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <HAL_UART_MspInit+0x134>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d12b      	bne.n	8000e68 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <HAL_UART_MspInit+0x128>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	4a16      	ldr	r2, [pc, #88]	; (8000e74 <HAL_UART_MspInit+0x128>)
 8000e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_UART_MspInit+0x128>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <HAL_UART_MspInit+0x128>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <HAL_UART_MspInit+0x128>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <HAL_UART_MspInit+0x128>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e48:	230c      	movs	r3, #12
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	4619      	mov	r1, r3
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <HAL_UART_MspInit+0x12c>)
 8000e64:	f000 fdd2 	bl	8001a0c <HAL_GPIO_Init>
}
 8000e68:	bf00      	nop
 8000e6a:	3730      	adds	r7, #48	; 0x30
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40011000 	.word	0x40011000
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020000 	.word	0x40020000
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	40004400 	.word	0x40004400

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <NMI_Handler+0x4>

08000e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler+0x4>

08000e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed0:	f000 f898 	bl	8001004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8000edc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ee0:	f000 ff32 	bl	8001d48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <SystemInit+0x20>)
 8000eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <SystemInit+0x20>)
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f12:	490e      	ldr	r1, [pc, #56]	; (8000f4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f14:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f18:	e002      	b.n	8000f20 <LoopCopyDataInit>

08000f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1e:	3304      	adds	r3, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f24:	d3f9      	bcc.n	8000f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f28:	4c0b      	ldr	r4, [pc, #44]	; (8000f58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f2c:	e001      	b.n	8000f32 <LoopFillZerobss>

08000f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f30:	3204      	adds	r2, #4

08000f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f34:	d3fb      	bcc.n	8000f2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f36:	f7ff ffd7 	bl	8000ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f002 fdff 	bl	8003b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3e:	f7ff facb 	bl	80004d8 <main>
  bx  lr    
 8000f42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f50:	08003bd4 	.word	0x08003bd4
  ldr r2, =_sbss
 8000f54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f58:	2000014c 	.word	0x2000014c

08000f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC_IRQHandler>
	...

08000f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <HAL_Init+0x40>)
 8000f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <HAL_Init+0x40>)
 8000f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_Init+0x40>)
 8000f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f000 fcfd 	bl	8001988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f000 f808 	bl	8000fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f94:	f7ff fe16 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023c00 	.word	0x40023c00

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x54>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_InitTick+0x58>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fd15 	bl	80019f2 <HAL_SYSTICK_Config>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00e      	b.n	8000ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d80a      	bhi.n	8000fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 fcdd 	bl	800199e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe4:	4a06      	ldr	r2, [pc, #24]	; (8001000 <HAL_InitTick+0x5c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000004 	.word	0x20000004

08001004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x20>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x24>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <HAL_IncTick+0x24>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000008 	.word	0x20000008
 8001028:	20000148 	.word	0x20000148

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <HAL_GetTick+0x14>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000148 	.word	0x20000148

08001044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800104c:	f7ff ffee 	bl	800102c <HAL_GetTick>
 8001050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105c:	d005      	beq.n	800106a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_Delay+0x44>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800106a:	bf00      	nop
 800106c:	f7ff ffde 	bl	800102c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	429a      	cmp	r2, r3
 800107a:	d8f7      	bhi.n	800106c <HAL_Delay+0x28>
  {
  }
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000008 	.word	0x20000008

0800108c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e033      	b.n	800110a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d109      	bne.n	80010be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff fdb2 	bl	8000c14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f003 0310 	and.w	r3, r3, #16
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d118      	bne.n	80010fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010d2:	f023 0302 	bic.w	r3, r3, #2
 80010d6:	f043 0202 	orr.w	r2, r3, #2
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 fa86 	bl	80015f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f023 0303 	bic.w	r3, r3, #3
 80010f2:	f043 0201 	orr.w	r2, r3, #1
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	641a      	str	r2, [r3, #64]	; 0x40
 80010fa:	e001      	b.n	8001100 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001126:	2b01      	cmp	r3, #1
 8001128:	d101      	bne.n	800112e <HAL_ADC_Start+0x1a>
 800112a:	2302      	movs	r3, #2
 800112c:	e097      	b.n	800125e <HAL_ADC_Start+0x14a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b01      	cmp	r3, #1
 8001142:	d018      	beq.n	8001176 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0201 	orr.w	r2, r2, #1
 8001152:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001154:	4b45      	ldr	r3, [pc, #276]	; (800126c <HAL_ADC_Start+0x158>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a45      	ldr	r2, [pc, #276]	; (8001270 <HAL_ADC_Start+0x15c>)
 800115a:	fba2 2303 	umull	r2, r3, r2, r3
 800115e:	0c9a      	lsrs	r2, r3, #18
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001168:	e002      	b.n	8001170 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	3b01      	subs	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f9      	bne.n	800116a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	2b01      	cmp	r3, #1
 8001182:	d15f      	bne.n	8001244 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800118c:	f023 0301 	bic.w	r3, r3, #1
 8001190:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d007      	beq.n	80011b6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011c2:	d106      	bne.n	80011d2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c8:	f023 0206 	bic.w	r2, r3, #6
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	645a      	str	r2, [r3, #68]	; 0x44
 80011d0:	e002      	b.n	80011d8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <HAL_ADC_Start+0x160>)
 80011e2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011ec:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 031f 	and.w	r3, r3, #31
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10f      	bne.n	800121a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d129      	bne.n	800125c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	e020      	b.n	800125c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a16      	ldr	r2, [pc, #88]	; (8001278 <HAL_ADC_Start+0x164>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d11b      	bne.n	800125c <HAL_ADC_Start+0x148>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d114      	bne.n	800125c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	e00b      	b.n	800125c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f043 0210 	orr.w	r2, r3, #16
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001254:	f043 0201 	orr.w	r2, r3, #1
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000000 	.word	0x20000000
 8001270:	431bde83 	.word	0x431bde83
 8001274:	40012300 	.word	0x40012300
 8001278:	40012000 	.word	0x40012000

0800127c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001298:	d113      	bne.n	80012c2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a8:	d10b      	bne.n	80012c2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f043 0220 	orr.w	r2, r3, #32
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e063      	b.n	800138a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012c2:	f7ff feb3 	bl	800102c <HAL_GetTick>
 80012c6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012c8:	e021      	b.n	800130e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d0:	d01d      	beq.n	800130e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d007      	beq.n	80012e8 <HAL_ADC_PollForConversion+0x6c>
 80012d8:	f7ff fea8 	bl	800102c <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d212      	bcs.n	800130e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d00b      	beq.n	800130e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f043 0204 	orr.w	r2, r3, #4
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e03d      	b.n	800138a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b02      	cmp	r3, #2
 800131a:	d1d6      	bne.n	80012ca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f06f 0212 	mvn.w	r2, #18
 8001324:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d123      	bne.n	8001388 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001344:	2b00      	cmp	r3, #0
 8001346:	d11f      	bne.n	8001388 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001352:	2b00      	cmp	r3, #0
 8001354:	d006      	beq.n	8001364 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001360:	2b00      	cmp	r3, #0
 8001362:	d111      	bne.n	8001388 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d105      	bne.n	8001388 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	f043 0201 	orr.w	r2, r3, #1
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d101      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x1c>
 80013c4:	2302      	movs	r3, #2
 80013c6:	e105      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x228>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b09      	cmp	r3, #9
 80013d6:	d925      	bls.n	8001424 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68d9      	ldr	r1, [r3, #12]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	3b1e      	subs	r3, #30
 80013ee:	2207      	movs	r2, #7
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43da      	mvns	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	400a      	ands	r2, r1
 80013fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68d9      	ldr	r1, [r3, #12]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	b29b      	uxth	r3, r3
 800140e:	4618      	mov	r0, r3
 8001410:	4603      	mov	r3, r0
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4403      	add	r3, r0
 8001416:	3b1e      	subs	r3, #30
 8001418:	409a      	lsls	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	e022      	b.n	800146a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6919      	ldr	r1, [r3, #16]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	4613      	mov	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	2207      	movs	r2, #7
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	400a      	ands	r2, r1
 8001446:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6919      	ldr	r1, [r3, #16]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	4618      	mov	r0, r3
 800145a:	4603      	mov	r3, r0
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4403      	add	r3, r0
 8001460:	409a      	lsls	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b06      	cmp	r3, #6
 8001470:	d824      	bhi.n	80014bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	3b05      	subs	r3, #5
 8001484:	221f      	movs	r2, #31
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	400a      	ands	r2, r1
 8001492:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	3b05      	subs	r3, #5
 80014ae:	fa00 f203 	lsl.w	r2, r0, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	635a      	str	r2, [r3, #52]	; 0x34
 80014ba:	e04c      	b.n	8001556 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b0c      	cmp	r3, #12
 80014c2:	d824      	bhi.n	800150e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	3b23      	subs	r3, #35	; 0x23
 80014d6:	221f      	movs	r2, #31
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43da      	mvns	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	400a      	ands	r2, r1
 80014e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	3b23      	subs	r3, #35	; 0x23
 8001500:	fa00 f203 	lsl.w	r2, r0, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	631a      	str	r2, [r3, #48]	; 0x30
 800150c:	e023      	b.n	8001556 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	3b41      	subs	r3, #65	; 0x41
 8001520:	221f      	movs	r2, #31
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	400a      	ands	r2, r1
 800152e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4618      	mov	r0, r3
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	3b41      	subs	r3, #65	; 0x41
 800154a:	fa00 f203 	lsl.w	r2, r0, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001556:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <HAL_ADC_ConfigChannel+0x234>)
 8001558:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a21      	ldr	r2, [pc, #132]	; (80015e4 <HAL_ADC_ConfigChannel+0x238>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d109      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x1cc>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b12      	cmp	r3, #18
 800156a:	d105      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <HAL_ADC_ConfigChannel+0x238>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d123      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x21e>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b10      	cmp	r3, #16
 8001588:	d003      	beq.n	8001592 <HAL_ADC_ConfigChannel+0x1e6>
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b11      	cmp	r3, #17
 8001590:	d11b      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b10      	cmp	r3, #16
 80015a4:	d111      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_ADC_ConfigChannel+0x23c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a10      	ldr	r2, [pc, #64]	; (80015ec <HAL_ADC_ConfigChannel+0x240>)
 80015ac:	fba2 2303 	umull	r2, r3, r2, r3
 80015b0:	0c9a      	lsrs	r2, r3, #18
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015bc:	e002      	b.n	80015c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f9      	bne.n	80015be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40012300 	.word	0x40012300
 80015e4:	40012000 	.word	0x40012000
 80015e8:	20000000 	.word	0x20000000
 80015ec:	431bde83 	.word	0x431bde83

080015f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015f8:	4b79      	ldr	r3, [pc, #484]	; (80017e0 <ADC_Init+0x1f0>)
 80015fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	431a      	orrs	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001624:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6859      	ldr	r1, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	021a      	lsls	r2, r3, #8
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001648:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800166a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6899      	ldr	r1, [r3, #8]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	4a58      	ldr	r2, [pc, #352]	; (80017e4 <ADC_Init+0x1f4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d022      	beq.n	80016ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001696:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6899      	ldr	r1, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6899      	ldr	r1, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	e00f      	b.n	80016ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0202 	bic.w	r2, r2, #2
 80016fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6899      	ldr	r1, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7e1b      	ldrb	r3, [r3, #24]
 8001708:	005a      	lsls	r2, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d01b      	beq.n	8001754 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800172a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800173a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6859      	ldr	r1, [r3, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	3b01      	subs	r3, #1
 8001748:	035a      	lsls	r2, r3, #13
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	e007      	b.n	8001764 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001762:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	3b01      	subs	r3, #1
 8001780:	051a      	lsls	r2, r3, #20
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001798:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6899      	ldr	r1, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017a6:	025a      	lsls	r2, r3, #9
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6899      	ldr	r1, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	029a      	lsls	r2, r3, #10
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	609a      	str	r2, [r3, #8]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40012300 	.word	0x40012300
 80017e4:	0f000001 	.word	0x0f000001

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4907      	ldr	r1, [pc, #28]	; (8001884 <__NVIC_EnableIRQ+0x38>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000e100 	.word	0xe000e100

08001888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	2b00      	cmp	r3, #0
 800189a:	db0a      	blt.n	80018b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	490c      	ldr	r1, [pc, #48]	; (80018d4 <__NVIC_SetPriority+0x4c>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	0112      	lsls	r2, r2, #4
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	440b      	add	r3, r1
 80018ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b0:	e00a      	b.n	80018c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4908      	ldr	r1, [pc, #32]	; (80018d8 <__NVIC_SetPriority+0x50>)
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	3b04      	subs	r3, #4
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	440b      	add	r3, r1
 80018c6:	761a      	strb	r2, [r3, #24]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f1c3 0307 	rsb	r3, r3, #7
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	bf28      	it	cs
 80018fa:	2304      	movcs	r3, #4
 80018fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3304      	adds	r3, #4
 8001902:	2b06      	cmp	r3, #6
 8001904:	d902      	bls.n	800190c <NVIC_EncodePriority+0x30>
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3b03      	subs	r3, #3
 800190a:	e000      	b.n	800190e <NVIC_EncodePriority+0x32>
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	401a      	ands	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	43d9      	mvns	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	4313      	orrs	r3, r2
         );
}
 8001936:	4618      	mov	r0, r3
 8001938:	3724      	adds	r7, #36	; 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001954:	d301      	bcc.n	800195a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001956:	2301      	movs	r3, #1
 8001958:	e00f      	b.n	800197a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <SysTick_Config+0x40>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001962:	210f      	movs	r1, #15
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f7ff ff8e 	bl	8001888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <SysTick_Config+0x40>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <SysTick_Config+0x40>)
 8001974:	2207      	movs	r2, #7
 8001976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	e000e010 	.word	0xe000e010

08001988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff29 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b0:	f7ff ff3e 	bl	8001830 <__NVIC_GetPriorityGrouping>
 80019b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	6978      	ldr	r0, [r7, #20]
 80019bc:	f7ff ff8e 	bl	80018dc <NVIC_EncodePriority>
 80019c0:	4602      	mov	r2, r0
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff5d 	bl	8001888 <__NVIC_SetPriority>
}
 80019ce:	bf00      	nop
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff31 	bl	800184c <__NVIC_EnableIRQ>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ffa2 	bl	8001944 <SysTick_Config>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b089      	sub	sp, #36	; 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	e159      	b.n	8001cdc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a28:	2201      	movs	r2, #1
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	f040 8148 	bne.w	8001cd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d005      	beq.n	8001a5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d130      	bne.n	8001ac0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	2203      	movs	r2, #3
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a94:	2201      	movs	r2, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 0201 	and.w	r2, r3, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d017      	beq.n	8001afc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d123      	bne.n	8001b50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	08da      	lsrs	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3208      	adds	r2, #8
 8001b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	220f      	movs	r2, #15
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	08da      	lsrs	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3208      	adds	r2, #8
 8001b4a:	69b9      	ldr	r1, [r7, #24]
 8001b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0203 	and.w	r2, r3, #3
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80a2 	beq.w	8001cd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b57      	ldr	r3, [pc, #348]	; (8001cf4 <HAL_GPIO_Init+0x2e8>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a56      	ldr	r2, [pc, #344]	; (8001cf4 <HAL_GPIO_Init+0x2e8>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	4b54      	ldr	r3, [pc, #336]	; (8001cf4 <HAL_GPIO_Init+0x2e8>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bae:	4a52      	ldr	r2, [pc, #328]	; (8001cf8 <HAL_GPIO_Init+0x2ec>)
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	220f      	movs	r2, #15
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a49      	ldr	r2, [pc, #292]	; (8001cfc <HAL_GPIO_Init+0x2f0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d019      	beq.n	8001c0e <HAL_GPIO_Init+0x202>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a48      	ldr	r2, [pc, #288]	; (8001d00 <HAL_GPIO_Init+0x2f4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d013      	beq.n	8001c0a <HAL_GPIO_Init+0x1fe>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a47      	ldr	r2, [pc, #284]	; (8001d04 <HAL_GPIO_Init+0x2f8>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00d      	beq.n	8001c06 <HAL_GPIO_Init+0x1fa>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a46      	ldr	r2, [pc, #280]	; (8001d08 <HAL_GPIO_Init+0x2fc>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d007      	beq.n	8001c02 <HAL_GPIO_Init+0x1f6>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a45      	ldr	r2, [pc, #276]	; (8001d0c <HAL_GPIO_Init+0x300>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d101      	bne.n	8001bfe <HAL_GPIO_Init+0x1f2>
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	e008      	b.n	8001c10 <HAL_GPIO_Init+0x204>
 8001bfe:	2307      	movs	r3, #7
 8001c00:	e006      	b.n	8001c10 <HAL_GPIO_Init+0x204>
 8001c02:	2303      	movs	r3, #3
 8001c04:	e004      	b.n	8001c10 <HAL_GPIO_Init+0x204>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e002      	b.n	8001c10 <HAL_GPIO_Init+0x204>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_GPIO_Init+0x204>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	69fa      	ldr	r2, [r7, #28]
 8001c12:	f002 0203 	and.w	r2, r2, #3
 8001c16:	0092      	lsls	r2, r2, #2
 8001c18:	4093      	lsls	r3, r2
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c20:	4935      	ldr	r1, [pc, #212]	; (8001cf8 <HAL_GPIO_Init+0x2ec>)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	089b      	lsrs	r3, r3, #2
 8001c26:	3302      	adds	r3, #2
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2e:	4b38      	ldr	r3, [pc, #224]	; (8001d10 <HAL_GPIO_Init+0x304>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c52:	4a2f      	ldr	r2, [pc, #188]	; (8001d10 <HAL_GPIO_Init+0x304>)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c58:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <HAL_GPIO_Init+0x304>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c7c:	4a24      	ldr	r2, [pc, #144]	; (8001d10 <HAL_GPIO_Init+0x304>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c82:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <HAL_GPIO_Init+0x304>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ca6:	4a1a      	ldr	r2, [pc, #104]	; (8001d10 <HAL_GPIO_Init+0x304>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cac:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <HAL_GPIO_Init+0x304>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cd0:	4a0f      	ldr	r2, [pc, #60]	; (8001d10 <HAL_GPIO_Init+0x304>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	2b0f      	cmp	r3, #15
 8001ce0:	f67f aea2 	bls.w	8001a28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3724      	adds	r7, #36	; 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40013800 	.word	0x40013800
 8001cfc:	40020000 	.word	0x40020000
 8001d00:	40020400 	.word	0x40020400
 8001d04:	40020800 	.word	0x40020800
 8001d08:	40020c00 	.word	0x40020c00
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40013c00 	.word	0x40013c00

08001d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	807b      	strh	r3, [r7, #2]
 8001d20:	4613      	mov	r3, r2
 8001d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d24:	787b      	ldrb	r3, [r7, #1]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d30:	e003      	b.n	8001d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d32:	887b      	ldrh	r3, [r7, #2]
 8001d34:	041a      	lsls	r2, r3, #16
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	619a      	str	r2, [r3, #24]
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d54:	695a      	ldr	r2, [r3, #20]
 8001d56:	88fb      	ldrh	r3, [r7, #6]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d006      	beq.n	8001d6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe feda 	bl	8000b20 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40013c00 	.word	0x40013c00

08001d78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e267      	b.n	800225a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d075      	beq.n	8001e82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d96:	4b88      	ldr	r3, [pc, #544]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d00c      	beq.n	8001dbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001da2:	4b85      	ldr	r3, [pc, #532]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d112      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dae:	4b82      	ldr	r3, [pc, #520]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dba:	d10b      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbc:	4b7e      	ldr	r3, [pc, #504]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d05b      	beq.n	8001e80 <HAL_RCC_OscConfig+0x108>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d157      	bne.n	8001e80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e242      	b.n	800225a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ddc:	d106      	bne.n	8001dec <HAL_RCC_OscConfig+0x74>
 8001dde:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a75      	ldr	r2, [pc, #468]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	e01d      	b.n	8001e28 <HAL_RCC_OscConfig+0xb0>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x98>
 8001df6:	4b70      	ldr	r3, [pc, #448]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a6f      	ldr	r2, [pc, #444]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	4b6d      	ldr	r3, [pc, #436]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a6c      	ldr	r2, [pc, #432]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e00b      	b.n	8001e28 <HAL_RCC_OscConfig+0xb0>
 8001e10:	4b69      	ldr	r3, [pc, #420]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a68      	ldr	r2, [pc, #416]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b66      	ldr	r3, [pc, #408]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a65      	ldr	r2, [pc, #404]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d013      	beq.n	8001e58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e30:	f7ff f8fc 	bl	800102c <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e38:	f7ff f8f8 	bl	800102c <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	; 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e207      	b.n	800225a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4a:	4b5b      	ldr	r3, [pc, #364]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0xc0>
 8001e56:	e014      	b.n	8001e82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff f8e8 	bl	800102c <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e60:	f7ff f8e4 	bl	800102c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	; 0x64
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e1f3      	b.n	800225a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e72:	4b51      	ldr	r3, [pc, #324]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0xe8>
 8001e7e:	e000      	b.n	8001e82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d063      	beq.n	8001f56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e8e:	4b4a      	ldr	r3, [pc, #296]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00b      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e9a:	4b47      	ldr	r3, [pc, #284]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d11c      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ea6:	4b44      	ldr	r3, [pc, #272]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d116      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb2:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d005      	beq.n	8001eca <HAL_RCC_OscConfig+0x152>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d001      	beq.n	8001eca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e1c7      	b.n	800225a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eca:	4b3b      	ldr	r3, [pc, #236]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4937      	ldr	r1, [pc, #220]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ede:	e03a      	b.n	8001f56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d020      	beq.n	8001f2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee8:	4b34      	ldr	r3, [pc, #208]	; (8001fbc <HAL_RCC_OscConfig+0x244>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eee:	f7ff f89d 	bl	800102c <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef6:	f7ff f899 	bl	800102c <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e1a8      	b.n	800225a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f08:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4925      	ldr	r1, [pc, #148]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	600b      	str	r3, [r1, #0]
 8001f28:	e015      	b.n	8001f56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f2a:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_RCC_OscConfig+0x244>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7ff f87c 	bl	800102c <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f38:	f7ff f878 	bl	800102c <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e187      	b.n	800225a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4a:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d036      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d016      	beq.n	8001f98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <HAL_RCC_OscConfig+0x248>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f70:	f7ff f85c 	bl	800102c <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f78:	f7ff f858 	bl	800102c <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e167      	b.n	800225a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0x200>
 8001f96:	e01b      	b.n	8001fd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_RCC_OscConfig+0x248>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9e:	f7ff f845 	bl	800102c <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa4:	e00e      	b.n	8001fc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa6:	f7ff f841 	bl	800102c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d907      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e150      	b.n	800225a <HAL_RCC_OscConfig+0x4e2>
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	42470000 	.word	0x42470000
 8001fc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc4:	4b88      	ldr	r3, [pc, #544]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 8001fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ea      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 8097 	beq.w	800210c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe2:	4b81      	ldr	r3, [pc, #516]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10f      	bne.n	800200e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	4b7d      	ldr	r3, [pc, #500]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	4a7c      	ldr	r2, [pc, #496]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffe:	4b7a      	ldr	r3, [pc, #488]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800200a:	2301      	movs	r3, #1
 800200c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200e:	4b77      	ldr	r3, [pc, #476]	; (80021ec <HAL_RCC_OscConfig+0x474>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d118      	bne.n	800204c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800201a:	4b74      	ldr	r3, [pc, #464]	; (80021ec <HAL_RCC_OscConfig+0x474>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a73      	ldr	r2, [pc, #460]	; (80021ec <HAL_RCC_OscConfig+0x474>)
 8002020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002026:	f7ff f801 	bl	800102c <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202e:	f7fe fffd 	bl	800102c <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e10c      	b.n	800225a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002040:	4b6a      	ldr	r3, [pc, #424]	; (80021ec <HAL_RCC_OscConfig+0x474>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d106      	bne.n	8002062 <HAL_RCC_OscConfig+0x2ea>
 8002054:	4b64      	ldr	r3, [pc, #400]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 8002056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002058:	4a63      	ldr	r2, [pc, #396]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6713      	str	r3, [r2, #112]	; 0x70
 8002060:	e01c      	b.n	800209c <HAL_RCC_OscConfig+0x324>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b05      	cmp	r3, #5
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0x30c>
 800206a:	4b5f      	ldr	r3, [pc, #380]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206e:	4a5e      	ldr	r2, [pc, #376]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 8002070:	f043 0304 	orr.w	r3, r3, #4
 8002074:	6713      	str	r3, [r2, #112]	; 0x70
 8002076:	4b5c      	ldr	r3, [pc, #368]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207a:	4a5b      	ldr	r2, [pc, #364]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6713      	str	r3, [r2, #112]	; 0x70
 8002082:	e00b      	b.n	800209c <HAL_RCC_OscConfig+0x324>
 8002084:	4b58      	ldr	r3, [pc, #352]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 8002086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002088:	4a57      	ldr	r2, [pc, #348]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 800208a:	f023 0301 	bic.w	r3, r3, #1
 800208e:	6713      	str	r3, [r2, #112]	; 0x70
 8002090:	4b55      	ldr	r3, [pc, #340]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	4a54      	ldr	r2, [pc, #336]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 8002096:	f023 0304 	bic.w	r3, r3, #4
 800209a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d015      	beq.n	80020d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a4:	f7fe ffc2 	bl	800102c <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ac:	f7fe ffbe 	bl	800102c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e0cb      	b.n	800225a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c2:	4b49      	ldr	r3, [pc, #292]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 80020c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0ee      	beq.n	80020ac <HAL_RCC_OscConfig+0x334>
 80020ce:	e014      	b.n	80020fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d0:	f7fe ffac 	bl	800102c <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d8:	f7fe ffa8 	bl	800102c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e0b5      	b.n	800225a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ee:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1ee      	bne.n	80020d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020fa:	7dfb      	ldrb	r3, [r7, #23]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d105      	bne.n	800210c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002100:	4b39      	ldr	r3, [pc, #228]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	4a38      	ldr	r2, [pc, #224]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 8002106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800210a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80a1 	beq.w	8002258 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002116:	4b34      	ldr	r3, [pc, #208]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b08      	cmp	r3, #8
 8002120:	d05c      	beq.n	80021dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d141      	bne.n	80021ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212a:	4b31      	ldr	r3, [pc, #196]	; (80021f0 <HAL_RCC_OscConfig+0x478>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7fe ff7c 	bl	800102c <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002138:	f7fe ff78 	bl	800102c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e087      	b.n	800225a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214a:	4b27      	ldr	r3, [pc, #156]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69da      	ldr	r2, [r3, #28]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	019b      	lsls	r3, r3, #6
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216c:	085b      	lsrs	r3, r3, #1
 800216e:	3b01      	subs	r3, #1
 8002170:	041b      	lsls	r3, r3, #16
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002178:	061b      	lsls	r3, r3, #24
 800217a:	491b      	ldr	r1, [pc, #108]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_RCC_OscConfig+0x478>)
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002186:	f7fe ff51 	bl	800102c <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218e:	f7fe ff4d 	bl	800102c <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e05c      	b.n	800225a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x416>
 80021ac:	e054      	b.n	8002258 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <HAL_RCC_OscConfig+0x478>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7fe ff3a 	bl	800102c <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021bc:	f7fe ff36 	bl	800102c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e045      	b.n	800225a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_RCC_OscConfig+0x470>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x444>
 80021da:	e03d      	b.n	8002258 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d107      	bne.n	80021f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e038      	b.n	800225a <HAL_RCC_OscConfig+0x4e2>
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40007000 	.word	0x40007000
 80021f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021f4:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <HAL_RCC_OscConfig+0x4ec>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d028      	beq.n	8002254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800220c:	429a      	cmp	r2, r3
 800220e:	d121      	bne.n	8002254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	429a      	cmp	r2, r3
 800221c:	d11a      	bne.n	8002254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002224:	4013      	ands	r3, r2
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800222a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800222c:	4293      	cmp	r3, r2
 800222e:	d111      	bne.n	8002254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	085b      	lsrs	r3, r3, #1
 800223c:	3b01      	subs	r3, #1
 800223e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d107      	bne.n	8002254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800

08002268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0cc      	b.n	8002416 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800227c:	4b68      	ldr	r3, [pc, #416]	; (8002420 <HAL_RCC_ClockConfig+0x1b8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d90c      	bls.n	80022a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	4b65      	ldr	r3, [pc, #404]	; (8002420 <HAL_RCC_ClockConfig+0x1b8>)
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002292:	4b63      	ldr	r3, [pc, #396]	; (8002420 <HAL_RCC_ClockConfig+0x1b8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d001      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0b8      	b.n	8002416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d020      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022bc:	4b59      	ldr	r3, [pc, #356]	; (8002424 <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	4a58      	ldr	r2, [pc, #352]	; (8002424 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022d4:	4b53      	ldr	r3, [pc, #332]	; (8002424 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4a52      	ldr	r2, [pc, #328]	; (8002424 <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e0:	4b50      	ldr	r3, [pc, #320]	; (8002424 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	494d      	ldr	r1, [pc, #308]	; (8002424 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d044      	beq.n	8002388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d107      	bne.n	8002316 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	4b47      	ldr	r3, [pc, #284]	; (8002424 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d119      	bne.n	8002346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e07f      	b.n	8002416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d003      	beq.n	8002326 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002322:	2b03      	cmp	r3, #3
 8002324:	d107      	bne.n	8002336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002326:	4b3f      	ldr	r3, [pc, #252]	; (8002424 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e06f      	b.n	8002416 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002336:	4b3b      	ldr	r3, [pc, #236]	; (8002424 <HAL_RCC_ClockConfig+0x1bc>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e067      	b.n	8002416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002346:	4b37      	ldr	r3, [pc, #220]	; (8002424 <HAL_RCC_ClockConfig+0x1bc>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f023 0203 	bic.w	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	4934      	ldr	r1, [pc, #208]	; (8002424 <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	4313      	orrs	r3, r2
 8002356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002358:	f7fe fe68 	bl	800102c <HAL_GetTick>
 800235c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	e00a      	b.n	8002376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002360:	f7fe fe64 	bl	800102c <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	; 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e04f      	b.n	8002416 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	4b2b      	ldr	r3, [pc, #172]	; (8002424 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 020c 	and.w	r2, r3, #12
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	429a      	cmp	r2, r3
 8002386:	d1eb      	bne.n	8002360 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002388:	4b25      	ldr	r3, [pc, #148]	; (8002420 <HAL_RCC_ClockConfig+0x1b8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d20c      	bcs.n	80023b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b22      	ldr	r3, [pc, #136]	; (8002420 <HAL_RCC_ClockConfig+0x1b8>)
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	4b20      	ldr	r3, [pc, #128]	; (8002420 <HAL_RCC_ClockConfig+0x1b8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e032      	b.n	8002416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023bc:	4b19      	ldr	r3, [pc, #100]	; (8002424 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4916      	ldr	r1, [pc, #88]	; (8002424 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023da:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	490e      	ldr	r1, [pc, #56]	; (8002424 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023ee:	f000 f821 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 80023f2:	4602      	mov	r2, r0
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	490a      	ldr	r1, [pc, #40]	; (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	5ccb      	ldrb	r3, [r1, r3]
 8002402:	fa22 f303 	lsr.w	r3, r2, r3
 8002406:	4a09      	ldr	r2, [pc, #36]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_RCC_ClockConfig+0x1c8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fdc8 	bl	8000fa4 <HAL_InitTick>

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40023c00 	.word	0x40023c00
 8002424:	40023800 	.word	0x40023800
 8002428:	08003bac 	.word	0x08003bac
 800242c:	20000000 	.word	0x20000000
 8002430:	20000004 	.word	0x20000004

08002434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002438:	b094      	sub	sp, #80	; 0x50
 800243a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	647b      	str	r3, [r7, #68]	; 0x44
 8002440:	2300      	movs	r3, #0
 8002442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002444:	2300      	movs	r3, #0
 8002446:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800244c:	4b79      	ldr	r3, [pc, #484]	; (8002634 <HAL_RCC_GetSysClockFreq+0x200>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	2b08      	cmp	r3, #8
 8002456:	d00d      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0x40>
 8002458:	2b08      	cmp	r3, #8
 800245a:	f200 80e1 	bhi.w	8002620 <HAL_RCC_GetSysClockFreq+0x1ec>
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0x34>
 8002462:	2b04      	cmp	r3, #4
 8002464:	d003      	beq.n	800246e <HAL_RCC_GetSysClockFreq+0x3a>
 8002466:	e0db      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002468:	4b73      	ldr	r3, [pc, #460]	; (8002638 <HAL_RCC_GetSysClockFreq+0x204>)
 800246a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800246c:	e0db      	b.n	8002626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800246e:	4b73      	ldr	r3, [pc, #460]	; (800263c <HAL_RCC_GetSysClockFreq+0x208>)
 8002470:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002472:	e0d8      	b.n	8002626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002474:	4b6f      	ldr	r3, [pc, #444]	; (8002634 <HAL_RCC_GetSysClockFreq+0x200>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800247c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800247e:	4b6d      	ldr	r3, [pc, #436]	; (8002634 <HAL_RCC_GetSysClockFreq+0x200>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d063      	beq.n	8002552 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800248a:	4b6a      	ldr	r3, [pc, #424]	; (8002634 <HAL_RCC_GetSysClockFreq+0x200>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	099b      	lsrs	r3, r3, #6
 8002490:	2200      	movs	r2, #0
 8002492:	63bb      	str	r3, [r7, #56]	; 0x38
 8002494:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800249c:	633b      	str	r3, [r7, #48]	; 0x30
 800249e:	2300      	movs	r3, #0
 80024a0:	637b      	str	r3, [r7, #52]	; 0x34
 80024a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024a6:	4622      	mov	r2, r4
 80024a8:	462b      	mov	r3, r5
 80024aa:	f04f 0000 	mov.w	r0, #0
 80024ae:	f04f 0100 	mov.w	r1, #0
 80024b2:	0159      	lsls	r1, r3, #5
 80024b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024b8:	0150      	lsls	r0, r2, #5
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4621      	mov	r1, r4
 80024c0:	1a51      	subs	r1, r2, r1
 80024c2:	6139      	str	r1, [r7, #16]
 80024c4:	4629      	mov	r1, r5
 80024c6:	eb63 0301 	sbc.w	r3, r3, r1
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024d8:	4659      	mov	r1, fp
 80024da:	018b      	lsls	r3, r1, #6
 80024dc:	4651      	mov	r1, sl
 80024de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024e2:	4651      	mov	r1, sl
 80024e4:	018a      	lsls	r2, r1, #6
 80024e6:	4651      	mov	r1, sl
 80024e8:	ebb2 0801 	subs.w	r8, r2, r1
 80024ec:	4659      	mov	r1, fp
 80024ee:	eb63 0901 	sbc.w	r9, r3, r1
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002506:	4690      	mov	r8, r2
 8002508:	4699      	mov	r9, r3
 800250a:	4623      	mov	r3, r4
 800250c:	eb18 0303 	adds.w	r3, r8, r3
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	462b      	mov	r3, r5
 8002514:	eb49 0303 	adc.w	r3, r9, r3
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002526:	4629      	mov	r1, r5
 8002528:	024b      	lsls	r3, r1, #9
 800252a:	4621      	mov	r1, r4
 800252c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002530:	4621      	mov	r1, r4
 8002532:	024a      	lsls	r2, r1, #9
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253a:	2200      	movs	r2, #0
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
 800253e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002540:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002544:	f7fd fe46 	bl	80001d4 <__aeabi_uldivmod>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4613      	mov	r3, r2
 800254e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002550:	e058      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002552:	4b38      	ldr	r3, [pc, #224]	; (8002634 <HAL_RCC_GetSysClockFreq+0x200>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	099b      	lsrs	r3, r3, #6
 8002558:	2200      	movs	r2, #0
 800255a:	4618      	mov	r0, r3
 800255c:	4611      	mov	r1, r2
 800255e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002562:	623b      	str	r3, [r7, #32]
 8002564:	2300      	movs	r3, #0
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
 8002568:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800256c:	4642      	mov	r2, r8
 800256e:	464b      	mov	r3, r9
 8002570:	f04f 0000 	mov.w	r0, #0
 8002574:	f04f 0100 	mov.w	r1, #0
 8002578:	0159      	lsls	r1, r3, #5
 800257a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800257e:	0150      	lsls	r0, r2, #5
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4641      	mov	r1, r8
 8002586:	ebb2 0a01 	subs.w	sl, r2, r1
 800258a:	4649      	mov	r1, r9
 800258c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800259c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025a4:	ebb2 040a 	subs.w	r4, r2, sl
 80025a8:	eb63 050b 	sbc.w	r5, r3, fp
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	00eb      	lsls	r3, r5, #3
 80025b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025ba:	00e2      	lsls	r2, r4, #3
 80025bc:	4614      	mov	r4, r2
 80025be:	461d      	mov	r5, r3
 80025c0:	4643      	mov	r3, r8
 80025c2:	18e3      	adds	r3, r4, r3
 80025c4:	603b      	str	r3, [r7, #0]
 80025c6:	464b      	mov	r3, r9
 80025c8:	eb45 0303 	adc.w	r3, r5, r3
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025da:	4629      	mov	r1, r5
 80025dc:	028b      	lsls	r3, r1, #10
 80025de:	4621      	mov	r1, r4
 80025e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025e4:	4621      	mov	r1, r4
 80025e6:	028a      	lsls	r2, r1, #10
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ee:	2200      	movs	r2, #0
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	61fa      	str	r2, [r7, #28]
 80025f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025f8:	f7fd fdec 	bl	80001d4 <__aeabi_uldivmod>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4613      	mov	r3, r2
 8002602:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_RCC_GetSysClockFreq+0x200>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	0c1b      	lsrs	r3, r3, #16
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	3301      	adds	r3, #1
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002614:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002618:	fbb2 f3f3 	udiv	r3, r2, r3
 800261c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800261e:	e002      	b.n	8002626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_RCC_GetSysClockFreq+0x204>)
 8002622:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002628:	4618      	mov	r0, r3
 800262a:	3750      	adds	r7, #80	; 0x50
 800262c:	46bd      	mov	sp, r7
 800262e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002632:	bf00      	nop
 8002634:	40023800 	.word	0x40023800
 8002638:	00f42400 	.word	0x00f42400
 800263c:	007a1200 	.word	0x007a1200

08002640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002644:	4b03      	ldr	r3, [pc, #12]	; (8002654 <HAL_RCC_GetHCLKFreq+0x14>)
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20000000 	.word	0x20000000

08002658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800265c:	f7ff fff0 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 8002660:	4602      	mov	r2, r0
 8002662:	4b05      	ldr	r3, [pc, #20]	; (8002678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	0a9b      	lsrs	r3, r3, #10
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	4903      	ldr	r1, [pc, #12]	; (800267c <HAL_RCC_GetPCLK1Freq+0x24>)
 800266e:	5ccb      	ldrb	r3, [r1, r3]
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002674:	4618      	mov	r0, r3
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40023800 	.word	0x40023800
 800267c:	08003bbc 	.word	0x08003bbc

08002680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002684:	f7ff ffdc 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 8002688:	4602      	mov	r2, r0
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	0b5b      	lsrs	r3, r3, #13
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	4903      	ldr	r1, [pc, #12]	; (80026a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002696:	5ccb      	ldrb	r3, [r1, r3]
 8002698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800269c:	4618      	mov	r0, r3
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40023800 	.word	0x40023800
 80026a4:	08003bbc 	.word	0x08003bbc

080026a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e041      	b.n	800273e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe fae4 	bl	8000c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3304      	adds	r3, #4
 80026e4:	4619      	mov	r1, r3
 80026e6:	4610      	mov	r0, r2
 80026e8:	f000 fb1c 	bl	8002d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b01      	cmp	r3, #1
 800275a:	d001      	beq.n	8002760 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e03c      	b.n	80027da <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1e      	ldr	r2, [pc, #120]	; (80027e8 <HAL_TIM_Base_Start+0xa0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d018      	beq.n	80027a4 <HAL_TIM_Base_Start+0x5c>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277a:	d013      	beq.n	80027a4 <HAL_TIM_Base_Start+0x5c>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a1a      	ldr	r2, [pc, #104]	; (80027ec <HAL_TIM_Base_Start+0xa4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d00e      	beq.n	80027a4 <HAL_TIM_Base_Start+0x5c>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a19      	ldr	r2, [pc, #100]	; (80027f0 <HAL_TIM_Base_Start+0xa8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d009      	beq.n	80027a4 <HAL_TIM_Base_Start+0x5c>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <HAL_TIM_Base_Start+0xac>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d004      	beq.n	80027a4 <HAL_TIM_Base_Start+0x5c>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a16      	ldr	r2, [pc, #88]	; (80027f8 <HAL_TIM_Base_Start+0xb0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d111      	bne.n	80027c8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b06      	cmp	r3, #6
 80027b4:	d010      	beq.n	80027d8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f042 0201 	orr.w	r2, r2, #1
 80027c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c6:	e007      	b.n	80027d8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40010000 	.word	0x40010000
 80027ec:	40000400 	.word	0x40000400
 80027f0:	40000800 	.word	0x40000800
 80027f4:	40000c00 	.word	0x40000c00
 80027f8:	40014000 	.word	0x40014000

080027fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e041      	b.n	8002892 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d106      	bne.n	8002828 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f839 	bl	800289a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3304      	adds	r3, #4
 8002838:	4619      	mov	r1, r3
 800283a:	4610      	mov	r0, r2
 800283c:	f000 fa72 	bl	8002d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d109      	bne.n	80028d4 <HAL_TIM_PWM_Start+0x24>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	bf14      	ite	ne
 80028cc:	2301      	movne	r3, #1
 80028ce:	2300      	moveq	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	e022      	b.n	800291a <HAL_TIM_PWM_Start+0x6a>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d109      	bne.n	80028ee <HAL_TIM_PWM_Start+0x3e>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	bf14      	ite	ne
 80028e6:	2301      	movne	r3, #1
 80028e8:	2300      	moveq	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	e015      	b.n	800291a <HAL_TIM_PWM_Start+0x6a>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d109      	bne.n	8002908 <HAL_TIM_PWM_Start+0x58>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	bf14      	ite	ne
 8002900:	2301      	movne	r3, #1
 8002902:	2300      	moveq	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	e008      	b.n	800291a <HAL_TIM_PWM_Start+0x6a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b01      	cmp	r3, #1
 8002912:	bf14      	ite	ne
 8002914:	2301      	movne	r3, #1
 8002916:	2300      	moveq	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e068      	b.n	80029f4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d104      	bne.n	8002932 <HAL_TIM_PWM_Start+0x82>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002930:	e013      	b.n	800295a <HAL_TIM_PWM_Start+0xaa>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b04      	cmp	r3, #4
 8002936:	d104      	bne.n	8002942 <HAL_TIM_PWM_Start+0x92>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002940:	e00b      	b.n	800295a <HAL_TIM_PWM_Start+0xaa>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b08      	cmp	r3, #8
 8002946:	d104      	bne.n	8002952 <HAL_TIM_PWM_Start+0xa2>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002950:	e003      	b.n	800295a <HAL_TIM_PWM_Start+0xaa>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2202      	movs	r2, #2
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2201      	movs	r2, #1
 8002960:	6839      	ldr	r1, [r7, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f000 fc84 	bl	8003270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a23      	ldr	r2, [pc, #140]	; (80029fc <HAL_TIM_PWM_Start+0x14c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d107      	bne.n	8002982 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002980:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1d      	ldr	r2, [pc, #116]	; (80029fc <HAL_TIM_PWM_Start+0x14c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d018      	beq.n	80029be <HAL_TIM_PWM_Start+0x10e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002994:	d013      	beq.n	80029be <HAL_TIM_PWM_Start+0x10e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a19      	ldr	r2, [pc, #100]	; (8002a00 <HAL_TIM_PWM_Start+0x150>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00e      	beq.n	80029be <HAL_TIM_PWM_Start+0x10e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <HAL_TIM_PWM_Start+0x154>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d009      	beq.n	80029be <HAL_TIM_PWM_Start+0x10e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a16      	ldr	r2, [pc, #88]	; (8002a08 <HAL_TIM_PWM_Start+0x158>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d004      	beq.n	80029be <HAL_TIM_PWM_Start+0x10e>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <HAL_TIM_PWM_Start+0x15c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d111      	bne.n	80029e2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b06      	cmp	r3, #6
 80029ce:	d010      	beq.n	80029f2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e0:	e007      	b.n	80029f2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0201 	orr.w	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40010000 	.word	0x40010000
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40000800 	.word	0x40000800
 8002a08:	40000c00 	.word	0x40000c00
 8002a0c:	40014000 	.word	0x40014000

08002a10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e0ae      	b.n	8002b8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b0c      	cmp	r3, #12
 8002a3a:	f200 809f 	bhi.w	8002b7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a3e:	a201      	add	r2, pc, #4	; (adr r2, 8002a44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a44:	08002a79 	.word	0x08002a79
 8002a48:	08002b7d 	.word	0x08002b7d
 8002a4c:	08002b7d 	.word	0x08002b7d
 8002a50:	08002b7d 	.word	0x08002b7d
 8002a54:	08002ab9 	.word	0x08002ab9
 8002a58:	08002b7d 	.word	0x08002b7d
 8002a5c:	08002b7d 	.word	0x08002b7d
 8002a60:	08002b7d 	.word	0x08002b7d
 8002a64:	08002afb 	.word	0x08002afb
 8002a68:	08002b7d 	.word	0x08002b7d
 8002a6c:	08002b7d 	.word	0x08002b7d
 8002a70:	08002b7d 	.word	0x08002b7d
 8002a74:	08002b3b 	.word	0x08002b3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 f9d0 	bl	8002e24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699a      	ldr	r2, [r3, #24]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0208 	orr.w	r2, r2, #8
 8002a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0204 	bic.w	r2, r2, #4
 8002aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6999      	ldr	r1, [r3, #24]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	619a      	str	r2, [r3, #24]
      break;
 8002ab6:	e064      	b.n	8002b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fa16 	bl	8002ef0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699a      	ldr	r2, [r3, #24]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6999      	ldr	r1, [r3, #24]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	021a      	lsls	r2, r3, #8
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	619a      	str	r2, [r3, #24]
      break;
 8002af8:	e043      	b.n	8002b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68b9      	ldr	r1, [r7, #8]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fa61 	bl	8002fc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	69da      	ldr	r2, [r3, #28]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0208 	orr.w	r2, r2, #8
 8002b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	69da      	ldr	r2, [r3, #28]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0204 	bic.w	r2, r2, #4
 8002b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69d9      	ldr	r1, [r3, #28]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	61da      	str	r2, [r3, #28]
      break;
 8002b38:	e023      	b.n	8002b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68b9      	ldr	r1, [r7, #8]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 faab 	bl	800309c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	69da      	ldr	r2, [r3, #28]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	69da      	ldr	r2, [r3, #28]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	69d9      	ldr	r1, [r3, #28]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	021a      	lsls	r2, r3, #8
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	61da      	str	r2, [r3, #28]
      break;
 8002b7a:	e002      	b.n	8002b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_TIM_ConfigClockSource+0x1c>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e0b4      	b.n	8002d1a <HAL_TIM_ConfigClockSource+0x186>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be8:	d03e      	beq.n	8002c68 <HAL_TIM_ConfigClockSource+0xd4>
 8002bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bee:	f200 8087 	bhi.w	8002d00 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf6:	f000 8086 	beq.w	8002d06 <HAL_TIM_ConfigClockSource+0x172>
 8002bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfe:	d87f      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x16c>
 8002c00:	2b70      	cmp	r3, #112	; 0x70
 8002c02:	d01a      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0xa6>
 8002c04:	2b70      	cmp	r3, #112	; 0x70
 8002c06:	d87b      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x16c>
 8002c08:	2b60      	cmp	r3, #96	; 0x60
 8002c0a:	d050      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x11a>
 8002c0c:	2b60      	cmp	r3, #96	; 0x60
 8002c0e:	d877      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x16c>
 8002c10:	2b50      	cmp	r3, #80	; 0x50
 8002c12:	d03c      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0xfa>
 8002c14:	2b50      	cmp	r3, #80	; 0x50
 8002c16:	d873      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x16c>
 8002c18:	2b40      	cmp	r3, #64	; 0x40
 8002c1a:	d058      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x13a>
 8002c1c:	2b40      	cmp	r3, #64	; 0x40
 8002c1e:	d86f      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x16c>
 8002c20:	2b30      	cmp	r3, #48	; 0x30
 8002c22:	d064      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x15a>
 8002c24:	2b30      	cmp	r3, #48	; 0x30
 8002c26:	d86b      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x16c>
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d060      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x15a>
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d867      	bhi.n	8002d00 <HAL_TIM_ConfigClockSource+0x16c>
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d05c      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x15a>
 8002c34:	2b10      	cmp	r3, #16
 8002c36:	d05a      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x15a>
 8002c38:	e062      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	6899      	ldr	r1, [r3, #8]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f000 faf1 	bl	8003230 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	609a      	str	r2, [r3, #8]
      break;
 8002c66:	e04f      	b.n	8002d08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	6899      	ldr	r1, [r3, #8]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f000 fada 	bl	8003230 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c8a:	609a      	str	r2, [r3, #8]
      break;
 8002c8c:	e03c      	b.n	8002d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6859      	ldr	r1, [r3, #4]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f000 fa4e 	bl	800313c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2150      	movs	r1, #80	; 0x50
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 faa7 	bl	80031fa <TIM_ITRx_SetConfig>
      break;
 8002cac:	e02c      	b.n	8002d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6859      	ldr	r1, [r3, #4]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f000 fa6d 	bl	800319a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2160      	movs	r1, #96	; 0x60
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fa97 	bl	80031fa <TIM_ITRx_SetConfig>
      break;
 8002ccc:	e01c      	b.n	8002d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6859      	ldr	r1, [r3, #4]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f000 fa2e 	bl	800313c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2140      	movs	r1, #64	; 0x40
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fa87 	bl	80031fa <TIM_ITRx_SetConfig>
      break;
 8002cec:	e00c      	b.n	8002d08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	f000 fa7e 	bl	80031fa <TIM_ITRx_SetConfig>
      break;
 8002cfe:	e003      	b.n	8002d08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
      break;
 8002d04:	e000      	b.n	8002d08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a34      	ldr	r2, [pc, #208]	; (8002e08 <TIM_Base_SetConfig+0xe4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00f      	beq.n	8002d5c <TIM_Base_SetConfig+0x38>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d42:	d00b      	beq.n	8002d5c <TIM_Base_SetConfig+0x38>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a31      	ldr	r2, [pc, #196]	; (8002e0c <TIM_Base_SetConfig+0xe8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d007      	beq.n	8002d5c <TIM_Base_SetConfig+0x38>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a30      	ldr	r2, [pc, #192]	; (8002e10 <TIM_Base_SetConfig+0xec>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d003      	beq.n	8002d5c <TIM_Base_SetConfig+0x38>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a2f      	ldr	r2, [pc, #188]	; (8002e14 <TIM_Base_SetConfig+0xf0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d108      	bne.n	8002d6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a25      	ldr	r2, [pc, #148]	; (8002e08 <TIM_Base_SetConfig+0xe4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01b      	beq.n	8002dae <TIM_Base_SetConfig+0x8a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7c:	d017      	beq.n	8002dae <TIM_Base_SetConfig+0x8a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a22      	ldr	r2, [pc, #136]	; (8002e0c <TIM_Base_SetConfig+0xe8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <TIM_Base_SetConfig+0x8a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a21      	ldr	r2, [pc, #132]	; (8002e10 <TIM_Base_SetConfig+0xec>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00f      	beq.n	8002dae <TIM_Base_SetConfig+0x8a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a20      	ldr	r2, [pc, #128]	; (8002e14 <TIM_Base_SetConfig+0xf0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00b      	beq.n	8002dae <TIM_Base_SetConfig+0x8a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a1f      	ldr	r2, [pc, #124]	; (8002e18 <TIM_Base_SetConfig+0xf4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d007      	beq.n	8002dae <TIM_Base_SetConfig+0x8a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a1e      	ldr	r2, [pc, #120]	; (8002e1c <TIM_Base_SetConfig+0xf8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d003      	beq.n	8002dae <TIM_Base_SetConfig+0x8a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a1d      	ldr	r2, [pc, #116]	; (8002e20 <TIM_Base_SetConfig+0xfc>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d108      	bne.n	8002dc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a08      	ldr	r2, [pc, #32]	; (8002e08 <TIM_Base_SetConfig+0xe4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d103      	bne.n	8002df4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	615a      	str	r2, [r3, #20]
}
 8002dfa:	bf00      	nop
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40010000 	.word	0x40010000
 8002e0c:	40000400 	.word	0x40000400
 8002e10:	40000800 	.word	0x40000800
 8002e14:	40000c00 	.word	0x40000c00
 8002e18:	40014000 	.word	0x40014000
 8002e1c:	40014400 	.word	0x40014400
 8002e20:	40014800 	.word	0x40014800

08002e24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	f023 0201 	bic.w	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0303 	bic.w	r3, r3, #3
 8002e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f023 0302 	bic.w	r3, r3, #2
 8002e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a1c      	ldr	r2, [pc, #112]	; (8002eec <TIM_OC1_SetConfig+0xc8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d10c      	bne.n	8002e9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f023 0308 	bic.w	r3, r3, #8
 8002e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f023 0304 	bic.w	r3, r3, #4
 8002e98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a13      	ldr	r2, [pc, #76]	; (8002eec <TIM_OC1_SetConfig+0xc8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d111      	bne.n	8002ec6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	621a      	str	r2, [r3, #32]
}
 8002ee0:	bf00      	nop
 8002ee2:	371c      	adds	r7, #28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	40010000 	.word	0x40010000

08002ef0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	f023 0210 	bic.w	r2, r3, #16
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f023 0320 	bic.w	r3, r3, #32
 8002f3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a1e      	ldr	r2, [pc, #120]	; (8002fc4 <TIM_OC2_SetConfig+0xd4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d10d      	bne.n	8002f6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a15      	ldr	r2, [pc, #84]	; (8002fc4 <TIM_OC2_SetConfig+0xd4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d113      	bne.n	8002f9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	621a      	str	r2, [r3, #32]
}
 8002fb6:	bf00      	nop
 8002fb8:	371c      	adds	r7, #28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40010000 	.word	0x40010000

08002fc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f023 0303 	bic.w	r3, r3, #3
 8002ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	4313      	orrs	r3, r2
 800301c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a1d      	ldr	r2, [pc, #116]	; (8003098 <TIM_OC3_SetConfig+0xd0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d10d      	bne.n	8003042 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800302c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a14      	ldr	r2, [pc, #80]	; (8003098 <TIM_OC3_SetConfig+0xd0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d113      	bne.n	8003072 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	621a      	str	r2, [r3, #32]
}
 800308c:	bf00      	nop
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	40010000 	.word	0x40010000

0800309c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	031b      	lsls	r3, r3, #12
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a10      	ldr	r2, [pc, #64]	; (8003138 <TIM_OC4_SetConfig+0x9c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d109      	bne.n	8003110 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	019b      	lsls	r3, r3, #6
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	621a      	str	r2, [r3, #32]
}
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40010000 	.word	0x40010000

0800313c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	f023 0201 	bic.w	r2, r3, #1
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f023 030a 	bic.w	r3, r3, #10
 8003178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4313      	orrs	r3, r2
 8003180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	621a      	str	r2, [r3, #32]
}
 800318e:	bf00      	nop
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800319a:	b480      	push	{r7}
 800319c:	b087      	sub	sp, #28
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	f023 0210 	bic.w	r2, r3, #16
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	031b      	lsls	r3, r3, #12
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	621a      	str	r2, [r3, #32]
}
 80031ee:	bf00      	nop
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b085      	sub	sp, #20
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003210:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	f043 0307 	orr.w	r3, r3, #7
 800321c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	609a      	str	r2, [r3, #8]
}
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800324a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	021a      	lsls	r2, r3, #8
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	431a      	orrs	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4313      	orrs	r3, r2
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	609a      	str	r2, [r3, #8]
}
 8003264:	bf00      	nop
 8003266:	371c      	adds	r7, #28
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	2201      	movs	r2, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a1a      	ldr	r2, [r3, #32]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	43db      	mvns	r3, r3
 8003292:	401a      	ands	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a1a      	ldr	r2, [r3, #32]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	431a      	orrs	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	621a      	str	r2, [r3, #32]
}
 80032ae:	bf00      	nop
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e050      	b.n	8003376 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1c      	ldr	r2, [pc, #112]	; (8003384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d018      	beq.n	800334a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003320:	d013      	beq.n	800334a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a18      	ldr	r2, [pc, #96]	; (8003388 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d00e      	beq.n	800334a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a16      	ldr	r2, [pc, #88]	; (800338c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d009      	beq.n	800334a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a15      	ldr	r2, [pc, #84]	; (8003390 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d004      	beq.n	800334a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a13      	ldr	r2, [pc, #76]	; (8003394 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d10c      	bne.n	8003364 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	4313      	orrs	r3, r2
 800335a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40010000 	.word	0x40010000
 8003388:	40000400 	.word	0x40000400
 800338c:	40000800 	.word	0x40000800
 8003390:	40000c00 	.word	0x40000c00
 8003394:	40014000 	.word	0x40014000

08003398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e03f      	b.n	800342a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fd fcc4 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2224      	movs	r2, #36	; 0x24
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f939 	bl	8003654 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695a      	ldr	r2, [r3, #20]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b08a      	sub	sp, #40	; 0x28
 8003436:	af02      	add	r7, sp, #8
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	603b      	str	r3, [r7, #0]
 800343e:	4613      	mov	r3, r2
 8003440:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b20      	cmp	r3, #32
 8003450:	f040 808c 	bne.w	800356c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_UART_Receive+0x2e>
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e084      	b.n	800356e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_UART_Receive+0x40>
 800346e:	2302      	movs	r3, #2
 8003470:	e07d      	b.n	800356e <HAL_UART_Receive+0x13c>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2222      	movs	r2, #34	; 0x22
 8003484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800348e:	f7fd fdcd 	bl	800102c <HAL_GetTick>
 8003492:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	88fa      	ldrh	r2, [r7, #6]
 8003498:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	88fa      	ldrh	r2, [r7, #6]
 800349e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a8:	d108      	bne.n	80034bc <HAL_UART_Receive+0x8a>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d104      	bne.n	80034bc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	e003      	b.n	80034c4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80034cc:	e043      	b.n	8003556 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2200      	movs	r2, #0
 80034d6:	2120      	movs	r1, #32
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f84c 	bl	8003576 <UART_WaitOnFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e042      	b.n	800356e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10c      	bne.n	8003508 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	3302      	adds	r3, #2
 8003504:	61bb      	str	r3, [r7, #24]
 8003506:	e01f      	b.n	8003548 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003510:	d007      	beq.n	8003522 <HAL_UART_Receive+0xf0>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10a      	bne.n	8003530 <HAL_UART_Receive+0xfe>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	701a      	strb	r2, [r3, #0]
 800352e:	e008      	b.n	8003542 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800353c:	b2da      	uxtb	r2, r3
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3301      	adds	r3, #1
 8003546:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1b6      	bne.n	80034ce <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	e000      	b.n	800356e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800356c:	2302      	movs	r3, #2
  }
}
 800356e:	4618      	mov	r0, r3
 8003570:	3720      	adds	r7, #32
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b090      	sub	sp, #64	; 0x40
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	4613      	mov	r3, r2
 8003584:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003586:	e050      	b.n	800362a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800358a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358e:	d04c      	beq.n	800362a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003592:	2b00      	cmp	r3, #0
 8003594:	d007      	beq.n	80035a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003596:	f7fd fd49 	bl	800102c <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d241      	bcs.n	800362a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	330c      	adds	r3, #12
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	e853 3f00 	ldrex	r3, [r3]
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	330c      	adds	r3, #12
 80035c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035c6:	637a      	str	r2, [r7, #52]	; 0x34
 80035c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e5      	bne.n	80035a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3314      	adds	r3, #20
 80035e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	613b      	str	r3, [r7, #16]
   return(result);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3314      	adds	r3, #20
 80035f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035fa:	623a      	str	r2, [r7, #32]
 80035fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	69f9      	ldr	r1, [r7, #28]
 8003600:	6a3a      	ldr	r2, [r7, #32]
 8003602:	e841 2300 	strex	r3, r2, [r1]
 8003606:	61bb      	str	r3, [r7, #24]
   return(result);
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1e5      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e00f      	b.n	800364a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4013      	ands	r3, r2
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	429a      	cmp	r2, r3
 8003638:	bf0c      	ite	eq
 800363a:	2301      	moveq	r3, #1
 800363c:	2300      	movne	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	429a      	cmp	r2, r3
 8003646:	d09f      	beq.n	8003588 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3740      	adds	r7, #64	; 0x40
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003658:	b0c0      	sub	sp, #256	; 0x100
 800365a:	af00      	add	r7, sp, #0
 800365c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003670:	68d9      	ldr	r1, [r3, #12]
 8003672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	ea40 0301 	orr.w	r3, r0, r1
 800367c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800367e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	431a      	orrs	r2, r3
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	431a      	orrs	r2, r3
 8003694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036ac:	f021 010c 	bic.w	r1, r1, #12
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036ba:	430b      	orrs	r3, r1
 80036bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ce:	6999      	ldr	r1, [r3, #24]
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	ea40 0301 	orr.w	r3, r0, r1
 80036da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4b8f      	ldr	r3, [pc, #572]	; (8003920 <UART_SetConfig+0x2cc>)
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d005      	beq.n	80036f4 <UART_SetConfig+0xa0>
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	4b8d      	ldr	r3, [pc, #564]	; (8003924 <UART_SetConfig+0x2d0>)
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d104      	bne.n	80036fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036f4:	f7fe ffc4 	bl	8002680 <HAL_RCC_GetPCLK2Freq>
 80036f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80036fc:	e003      	b.n	8003706 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036fe:	f7fe ffab 	bl	8002658 <HAL_RCC_GetPCLK1Freq>
 8003702:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003710:	f040 810c 	bne.w	800392c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003718:	2200      	movs	r2, #0
 800371a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800371e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003722:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003726:	4622      	mov	r2, r4
 8003728:	462b      	mov	r3, r5
 800372a:	1891      	adds	r1, r2, r2
 800372c:	65b9      	str	r1, [r7, #88]	; 0x58
 800372e:	415b      	adcs	r3, r3
 8003730:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003732:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003736:	4621      	mov	r1, r4
 8003738:	eb12 0801 	adds.w	r8, r2, r1
 800373c:	4629      	mov	r1, r5
 800373e:	eb43 0901 	adc.w	r9, r3, r1
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800374e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003752:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003756:	4690      	mov	r8, r2
 8003758:	4699      	mov	r9, r3
 800375a:	4623      	mov	r3, r4
 800375c:	eb18 0303 	adds.w	r3, r8, r3
 8003760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003764:	462b      	mov	r3, r5
 8003766:	eb49 0303 	adc.w	r3, r9, r3
 800376a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800376e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800377a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800377e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003782:	460b      	mov	r3, r1
 8003784:	18db      	adds	r3, r3, r3
 8003786:	653b      	str	r3, [r7, #80]	; 0x50
 8003788:	4613      	mov	r3, r2
 800378a:	eb42 0303 	adc.w	r3, r2, r3
 800378e:	657b      	str	r3, [r7, #84]	; 0x54
 8003790:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003794:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003798:	f7fc fd1c 	bl	80001d4 <__aeabi_uldivmod>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4b61      	ldr	r3, [pc, #388]	; (8003928 <UART_SetConfig+0x2d4>)
 80037a2:	fba3 2302 	umull	r2, r3, r3, r2
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	011c      	lsls	r4, r3, #4
 80037aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ae:	2200      	movs	r2, #0
 80037b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037bc:	4642      	mov	r2, r8
 80037be:	464b      	mov	r3, r9
 80037c0:	1891      	adds	r1, r2, r2
 80037c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80037c4:	415b      	adcs	r3, r3
 80037c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037cc:	4641      	mov	r1, r8
 80037ce:	eb12 0a01 	adds.w	sl, r2, r1
 80037d2:	4649      	mov	r1, r9
 80037d4:	eb43 0b01 	adc.w	fp, r3, r1
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037ec:	4692      	mov	sl, r2
 80037ee:	469b      	mov	fp, r3
 80037f0:	4643      	mov	r3, r8
 80037f2:	eb1a 0303 	adds.w	r3, sl, r3
 80037f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037fa:	464b      	mov	r3, r9
 80037fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003800:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003810:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003814:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003818:	460b      	mov	r3, r1
 800381a:	18db      	adds	r3, r3, r3
 800381c:	643b      	str	r3, [r7, #64]	; 0x40
 800381e:	4613      	mov	r3, r2
 8003820:	eb42 0303 	adc.w	r3, r2, r3
 8003824:	647b      	str	r3, [r7, #68]	; 0x44
 8003826:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800382a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800382e:	f7fc fcd1 	bl	80001d4 <__aeabi_uldivmod>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4611      	mov	r1, r2
 8003838:	4b3b      	ldr	r3, [pc, #236]	; (8003928 <UART_SetConfig+0x2d4>)
 800383a:	fba3 2301 	umull	r2, r3, r3, r1
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	2264      	movs	r2, #100	; 0x64
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	1acb      	subs	r3, r1, r3
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800384e:	4b36      	ldr	r3, [pc, #216]	; (8003928 <UART_SetConfig+0x2d4>)
 8003850:	fba3 2302 	umull	r2, r3, r3, r2
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800385c:	441c      	add	r4, r3
 800385e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003862:	2200      	movs	r2, #0
 8003864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003868:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800386c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003870:	4642      	mov	r2, r8
 8003872:	464b      	mov	r3, r9
 8003874:	1891      	adds	r1, r2, r2
 8003876:	63b9      	str	r1, [r7, #56]	; 0x38
 8003878:	415b      	adcs	r3, r3
 800387a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800387c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003880:	4641      	mov	r1, r8
 8003882:	1851      	adds	r1, r2, r1
 8003884:	6339      	str	r1, [r7, #48]	; 0x30
 8003886:	4649      	mov	r1, r9
 8003888:	414b      	adcs	r3, r1
 800388a:	637b      	str	r3, [r7, #52]	; 0x34
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003898:	4659      	mov	r1, fp
 800389a:	00cb      	lsls	r3, r1, #3
 800389c:	4651      	mov	r1, sl
 800389e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038a2:	4651      	mov	r1, sl
 80038a4:	00ca      	lsls	r2, r1, #3
 80038a6:	4610      	mov	r0, r2
 80038a8:	4619      	mov	r1, r3
 80038aa:	4603      	mov	r3, r0
 80038ac:	4642      	mov	r2, r8
 80038ae:	189b      	adds	r3, r3, r2
 80038b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038b4:	464b      	mov	r3, r9
 80038b6:	460a      	mov	r2, r1
 80038b8:	eb42 0303 	adc.w	r3, r2, r3
 80038bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038d4:	460b      	mov	r3, r1
 80038d6:	18db      	adds	r3, r3, r3
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038da:	4613      	mov	r3, r2
 80038dc:	eb42 0303 	adc.w	r3, r2, r3
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80038ea:	f7fc fc73 	bl	80001d4 <__aeabi_uldivmod>
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <UART_SetConfig+0x2d4>)
 80038f4:	fba3 1302 	umull	r1, r3, r3, r2
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	2164      	movs	r1, #100	; 0x64
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	3332      	adds	r3, #50	; 0x32
 8003906:	4a08      	ldr	r2, [pc, #32]	; (8003928 <UART_SetConfig+0x2d4>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	f003 0207 	and.w	r2, r3, #7
 8003912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4422      	add	r2, r4
 800391a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800391c:	e105      	b.n	8003b2a <UART_SetConfig+0x4d6>
 800391e:	bf00      	nop
 8003920:	40011000 	.word	0x40011000
 8003924:	40011400 	.word	0x40011400
 8003928:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800392c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003930:	2200      	movs	r2, #0
 8003932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003936:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800393a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800393e:	4642      	mov	r2, r8
 8003940:	464b      	mov	r3, r9
 8003942:	1891      	adds	r1, r2, r2
 8003944:	6239      	str	r1, [r7, #32]
 8003946:	415b      	adcs	r3, r3
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
 800394a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800394e:	4641      	mov	r1, r8
 8003950:	1854      	adds	r4, r2, r1
 8003952:	4649      	mov	r1, r9
 8003954:	eb43 0501 	adc.w	r5, r3, r1
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	00eb      	lsls	r3, r5, #3
 8003962:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003966:	00e2      	lsls	r2, r4, #3
 8003968:	4614      	mov	r4, r2
 800396a:	461d      	mov	r5, r3
 800396c:	4643      	mov	r3, r8
 800396e:	18e3      	adds	r3, r4, r3
 8003970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003974:	464b      	mov	r3, r9
 8003976:	eb45 0303 	adc.w	r3, r5, r3
 800397a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800397e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800398a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800399a:	4629      	mov	r1, r5
 800399c:	008b      	lsls	r3, r1, #2
 800399e:	4621      	mov	r1, r4
 80039a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039a4:	4621      	mov	r1, r4
 80039a6:	008a      	lsls	r2, r1, #2
 80039a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039ac:	f7fc fc12 	bl	80001d4 <__aeabi_uldivmod>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4b60      	ldr	r3, [pc, #384]	; (8003b38 <UART_SetConfig+0x4e4>)
 80039b6:	fba3 2302 	umull	r2, r3, r3, r2
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	011c      	lsls	r4, r3, #4
 80039be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039d0:	4642      	mov	r2, r8
 80039d2:	464b      	mov	r3, r9
 80039d4:	1891      	adds	r1, r2, r2
 80039d6:	61b9      	str	r1, [r7, #24]
 80039d8:	415b      	adcs	r3, r3
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039e0:	4641      	mov	r1, r8
 80039e2:	1851      	adds	r1, r2, r1
 80039e4:	6139      	str	r1, [r7, #16]
 80039e6:	4649      	mov	r1, r9
 80039e8:	414b      	adcs	r3, r1
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039f8:	4659      	mov	r1, fp
 80039fa:	00cb      	lsls	r3, r1, #3
 80039fc:	4651      	mov	r1, sl
 80039fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a02:	4651      	mov	r1, sl
 8003a04:	00ca      	lsls	r2, r1, #3
 8003a06:	4610      	mov	r0, r2
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	4642      	mov	r2, r8
 8003a0e:	189b      	adds	r3, r3, r2
 8003a10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a14:	464b      	mov	r3, r9
 8003a16:	460a      	mov	r2, r1
 8003a18:	eb42 0303 	adc.w	r3, r2, r3
 8003a1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a38:	4649      	mov	r1, r9
 8003a3a:	008b      	lsls	r3, r1, #2
 8003a3c:	4641      	mov	r1, r8
 8003a3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a42:	4641      	mov	r1, r8
 8003a44:	008a      	lsls	r2, r1, #2
 8003a46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a4a:	f7fc fbc3 	bl	80001d4 <__aeabi_uldivmod>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4b39      	ldr	r3, [pc, #228]	; (8003b38 <UART_SetConfig+0x4e4>)
 8003a54:	fba3 1302 	umull	r1, r3, r3, r2
 8003a58:	095b      	lsrs	r3, r3, #5
 8003a5a:	2164      	movs	r1, #100	; 0x64
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	3332      	adds	r3, #50	; 0x32
 8003a66:	4a34      	ldr	r2, [pc, #208]	; (8003b38 <UART_SetConfig+0x4e4>)
 8003a68:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6c:	095b      	lsrs	r3, r3, #5
 8003a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a72:	441c      	add	r4, r3
 8003a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a78:	2200      	movs	r2, #0
 8003a7a:	673b      	str	r3, [r7, #112]	; 0x70
 8003a7c:	677a      	str	r2, [r7, #116]	; 0x74
 8003a7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a82:	4642      	mov	r2, r8
 8003a84:	464b      	mov	r3, r9
 8003a86:	1891      	adds	r1, r2, r2
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	415b      	adcs	r3, r3
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a92:	4641      	mov	r1, r8
 8003a94:	1851      	adds	r1, r2, r1
 8003a96:	6039      	str	r1, [r7, #0]
 8003a98:	4649      	mov	r1, r9
 8003a9a:	414b      	adcs	r3, r1
 8003a9c:	607b      	str	r3, [r7, #4]
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003aaa:	4659      	mov	r1, fp
 8003aac:	00cb      	lsls	r3, r1, #3
 8003aae:	4651      	mov	r1, sl
 8003ab0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ab4:	4651      	mov	r1, sl
 8003ab6:	00ca      	lsls	r2, r1, #3
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4619      	mov	r1, r3
 8003abc:	4603      	mov	r3, r0
 8003abe:	4642      	mov	r2, r8
 8003ac0:	189b      	adds	r3, r3, r2
 8003ac2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ac4:	464b      	mov	r3, r9
 8003ac6:	460a      	mov	r2, r1
 8003ac8:	eb42 0303 	adc.w	r3, r2, r3
 8003acc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	663b      	str	r3, [r7, #96]	; 0x60
 8003ad8:	667a      	str	r2, [r7, #100]	; 0x64
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ae6:	4649      	mov	r1, r9
 8003ae8:	008b      	lsls	r3, r1, #2
 8003aea:	4641      	mov	r1, r8
 8003aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003af0:	4641      	mov	r1, r8
 8003af2:	008a      	lsls	r2, r1, #2
 8003af4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003af8:	f7fc fb6c 	bl	80001d4 <__aeabi_uldivmod>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <UART_SetConfig+0x4e4>)
 8003b02:	fba3 1302 	umull	r1, r3, r3, r2
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	2164      	movs	r1, #100	; 0x64
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	3332      	adds	r3, #50	; 0x32
 8003b14:	4a08      	ldr	r2, [pc, #32]	; (8003b38 <UART_SetConfig+0x4e4>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	f003 020f 	and.w	r2, r3, #15
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4422      	add	r2, r4
 8003b28:	609a      	str	r2, [r3, #8]
}
 8003b2a:	bf00      	nop
 8003b2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b30:	46bd      	mov	sp, r7
 8003b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b36:	bf00      	nop
 8003b38:	51eb851f 	.word	0x51eb851f

08003b3c <__libc_init_array>:
 8003b3c:	b570      	push	{r4, r5, r6, lr}
 8003b3e:	4d0d      	ldr	r5, [pc, #52]	; (8003b74 <__libc_init_array+0x38>)
 8003b40:	4c0d      	ldr	r4, [pc, #52]	; (8003b78 <__libc_init_array+0x3c>)
 8003b42:	1b64      	subs	r4, r4, r5
 8003b44:	10a4      	asrs	r4, r4, #2
 8003b46:	2600      	movs	r6, #0
 8003b48:	42a6      	cmp	r6, r4
 8003b4a:	d109      	bne.n	8003b60 <__libc_init_array+0x24>
 8003b4c:	4d0b      	ldr	r5, [pc, #44]	; (8003b7c <__libc_init_array+0x40>)
 8003b4e:	4c0c      	ldr	r4, [pc, #48]	; (8003b80 <__libc_init_array+0x44>)
 8003b50:	f000 f820 	bl	8003b94 <_init>
 8003b54:	1b64      	subs	r4, r4, r5
 8003b56:	10a4      	asrs	r4, r4, #2
 8003b58:	2600      	movs	r6, #0
 8003b5a:	42a6      	cmp	r6, r4
 8003b5c:	d105      	bne.n	8003b6a <__libc_init_array+0x2e>
 8003b5e:	bd70      	pop	{r4, r5, r6, pc}
 8003b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b64:	4798      	blx	r3
 8003b66:	3601      	adds	r6, #1
 8003b68:	e7ee      	b.n	8003b48 <__libc_init_array+0xc>
 8003b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b6e:	4798      	blx	r3
 8003b70:	3601      	adds	r6, #1
 8003b72:	e7f2      	b.n	8003b5a <__libc_init_array+0x1e>
 8003b74:	08003bcc 	.word	0x08003bcc
 8003b78:	08003bcc 	.word	0x08003bcc
 8003b7c:	08003bcc 	.word	0x08003bcc
 8003b80:	08003bd0 	.word	0x08003bd0

08003b84 <memset>:
 8003b84:	4402      	add	r2, r0
 8003b86:	4603      	mov	r3, r0
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d100      	bne.n	8003b8e <memset+0xa>
 8003b8c:	4770      	bx	lr
 8003b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b92:	e7f9      	b.n	8003b88 <memset+0x4>

08003b94 <_init>:
 8003b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b96:	bf00      	nop
 8003b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9a:	bc08      	pop	{r3}
 8003b9c:	469e      	mov	lr, r3
 8003b9e:	4770      	bx	lr

08003ba0 <_fini>:
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba2:	bf00      	nop
 8003ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba6:	bc08      	pop	{r3}
 8003ba8:	469e      	mov	lr, r3
 8003baa:	4770      	bx	lr
